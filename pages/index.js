import Head from "next/head";
import Image from "next/image";
import { SunIcon, MoonIcon } from "@heroicons/react/solid";
import { /* CheckCircleIcon, */ CheckIcon } from "@heroicons/react/outline";
import desktDark from "../todo-app-resources/images/bg-desktop-dark.jpg";
import desktLight from "../todo-app-resources/images/bg-desktop-light.jpg";
import { useEffect, useState } from "react";
import Todo from "../components/Todo";
import Form from "../components/Form";
import TodosFooter from "../components/TodosFooter";

export default function Home() {
  const [todo, setTodo] = useState("");
  const [todos, setTodos] = useState([]);
  const [newIsChecked, setNewIsChecked] = useState(false);
  const [lightTheme, setLightTheme] = useState(false);
  const [activeState, setActiveState] = useState("all");
  const [activeTodos, setActiveTodos] = useState([]);
  const [completedTodos, setCompletedTodos] = useState([]);

  const toggleNewChecked = () => {
    setNewIsChecked((prev) => !prev);
  };

  const newTodoHandler = (e) => {
    e.preventDefault();
    const newTodos = [
      ...todos,
      { text: todo, completed: false, index: getRandomInt() },
    ];
    const newTodosWithChecked = [
      ...todos,
      { text: todo, completed: true, index: getRandomInt() },
    ];
    newIsChecked ? setTodos(newTodosWithChecked) : setTodos(newTodos);

    setTodo("");

    setNewIsChecked(false);
  };

  //Utility function for getting a unique index
  function getRandomInt() {
    return Math.floor(Math.random() * 5000);
  }

  const toggleCompleted = (i) => {
    const updatedTodos = todos.map((item) => {
      if (item.index === i) {
        return { ...item, completed: !item.completed };
      } else {
        return item;
      }
    });
    setTodos(updatedTodos);
  };

  const removeTodo = (i) => {
    const updatedTodos = todos.filter((item) => item.index !== i);
    setTodos(updatedTodos);
    /* console.log(i); */
  };

  const itemsLeft = () => {
    const itemsLeftArray = todos.filter((item) => !item.completed);
    return itemsLeftArray.length;
  };

  const clearCompleted = () => {
    const updatedArr = todos.filter((item) => !item.completed);
    setTodos(updatedArr);
  };

  useEffect(() => {
    const newActiveArr = todos.filter((item) => !item.completed);
    setActiveTodos(newActiveArr);
    const newCompletedArr = todos.filter((item) => item.completed);
    setCompletedTodos(newCompletedArr);
    /* console.log(activeTodos); */
  }, [todos]);

  return (
    <div
      className={`flex flex-col ${
        lightTheme ? "bg-gray-200" : "bg-background_color"
      }  min-h-screen font-mainFont`}
    >
      <Head>
        <title>Todo App nr2</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {/* BACKGROUND */}
      {lightTheme ? <Image src={desktLight} /> : <Image src={desktDark} />}
      {/* DIV for ENTIRE TODO SECTION */}
      <div className="flex flex-col justify-center items-center w-96 -mt-32 z-50 relative ml-auto mr-auto">
        {/* TODO header + sun/moon image (light/dark theme) */}
        <div className="flex flex-row items-center text-3xl w-96 justify-between">
          <h1 className="font-semibold text text-white">TODO</h1>
          {lightTheme ? (
            <MoonIcon
              onClick={() => setLightTheme((prev) => !prev)}
              className="h-5 w-5 text-white cursor-pointer"
            />
          ) : (
            <SunIcon
              onClick={() => setLightTheme((prev) => !prev)}
              className="h-5 w-5 text-white cursor-pointer"
            />
          )}
        </div>

        {/*NEW TODO FORM */}
        <Form
          newTodoHandler={newTodoHandler}
          lightTheme={lightTheme}
          newIsChecked={newIsChecked}
          toggleNewChecked={toggleNewChecked}
          setTodo={setTodo}
          todo={todo}
        />

        {/* TODOS */}
        {/* create new state for active todos and completed todos */}
        {/* when todos is changed a useEffect handles setting new state for active & completed arrays. */}
        {/* if condition is met these are mapped out below. */}

        {activeState === "all" &&
          todos.map((todoItem, i) => (
            <Todo
              key={i}
              item={todoItem}
              toggleCompleted={toggleCompleted}
              removeTodo={removeTodo}
              priority={i}
              lightTheme={lightTheme}
            />
          ))}

        {activeState === "active" &&
          activeTodos.map((todoItem, i) => (
            <Todo
              key={i}
              item={todoItem}
              toggleCompleted={toggleCompleted}
              removeTodo={removeTodo}
              priority={i}
              lightTheme={lightTheme}
            />
          ))}

        {activeState === "completed" &&
          completedTodos.map((todoItem, i) => (
            <Todo
              key={i}
              item={todoItem}
              toggleCompleted={toggleCompleted}
              removeTodo={removeTodo}
              priority={i}
              lightTheme={lightTheme}
            />
          ))}

        {/* BELOW TODOS SECTION/TODOSFOOTER */}
        <TodosFooter
          lightTheme={lightTheme}
          itemsLeft={itemsLeft}
          clearCompleted={clearCompleted}
          activeState={activeState}
          setActiveState={setActiveState}
        />
      </div>
    </div>
  );
}
